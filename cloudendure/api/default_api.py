"""
    CloudEndure API documentation

    Â© 2021 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\".   # noqa: E501

    The version of the OpenAPI document: 5
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cloudendure.api_client import ApiClient
from cloudendure.api_client import Endpoint as _Endpoint
from cloudendure.model.audit_log import AuditLog
from cloudendure.model.error import Error
from cloudendure.model.extended_account_info import ExtendedAccountInfo
from cloudendure.model.inline_object2 import InlineObject2
from cloudendure.model.inline_object6 import InlineObject6
from cloudendure.model.inline_response2001 import InlineResponse2001
from cloudendure.model.inline_response2002 import InlineResponse2002
from cloudendure.model.project_storage import ProjectStorage
from cloudendure.model.projects_and_users import ProjectsAndUsers
from cloudendure.model.user import User
from cloudendure.model.users_and_roles import UsersAndRoles
from cloudendure.model.users_list import UsersList
from cloudendure.model_utils import check_allowed_values  # noqa: F401
from cloudendure.model_utils import (
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __accounts_account_id_access_get(self, account_id, username, **kwargs):
            """get a temporary token by email  # noqa: E501

            get a temporary token by email. Available for account owner when SSO is used  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.accounts_account_id_access_get(account_id, username, async_req=True)
            >>> result = thread.get()

            Args:
                account_id (str):
                username (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse2002
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["account_id"] = account_id
            kwargs["username"] = username
            return self.call_with_http_info(**kwargs)

        self.accounts_account_id_access_get = _Endpoint(
            settings={
                "response_type": (InlineResponse2002,),
                "auth": [],
                "endpoint_path": "/accounts/{accountId}/access",
                "operation_id": "accounts_account_id_access_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": ["account_id", "username",],
                "required": ["account_id", "username",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {"account_id": (str,), "username": (str,),},
                "attribute_map": {"account_id": "accountId", "username": "username",},
                "location_map": {"account_id": "path", "username": "query",},
                "collection_format_map": {},
            },
            headers_map={"accept": ["application/json"], "content_type": [],},
            api_client=api_client,
            callable=__accounts_account_id_access_get,
        )

        def __extended_account_info_get(self, **kwargs):
            """Returns the extended current account information.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.extended_account_info_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ExtendedAccountInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            return self.call_with_http_info(**kwargs)

        self.extended_account_info_get = _Endpoint(
            settings={
                "response_type": (ExtendedAccountInfo,),
                "auth": [],
                "endpoint_path": "/extendedAccountInfo",
                "operation_id": "extended_account_info_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {},
                "attribute_map": {},
                "location_map": {},
                "collection_format_map": {},
            },
            headers_map={"accept": ["application/json"], "content_type": [],},
            api_client=api_client,
            callable=__extended_account_info_get,
        )

        def __projects_assign_users_post(self, projects_and_users, **kwargs):
            """Assign User  # noqa: E501

            Assign User to Project  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.projects_assign_users_post(projects_and_users, async_req=True)
            >>> result = thread.get()

            Args:
                projects_and_users (ProjectsAndUsers):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["projects_and_users"] = projects_and_users
            return self.call_with_http_info(**kwargs)

        self.projects_assign_users_post = _Endpoint(
            settings={
                "response_type": None,
                "auth": [],
                "endpoint_path": "/projects/assignUsers",
                "operation_id": "projects_assign_users_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": ["projects_and_users",],
                "required": ["projects_and_users",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {"projects_and_users": (ProjectsAndUsers,),},
                "attribute_map": {},
                "location_map": {"projects_and_users": "body",},
                "collection_format_map": {},
            },
            headers_map={"accept": [], "content_type": ["application/json"]},
            api_client=api_client,
            callable=__projects_assign_users_post,
        )

        def __projects_project_id_audit_log_get(self, project_id, **kwargs):
            """Get audit log  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.projects_project_id_audit_log_get(project_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str):

            Keyword Args:
                limit (int): A number specifying how many entries to return.. [optional] if omitted the server will use the default value of 1500
                from_date_time (datetime): Used to limit the response to a specific date range. Must be used in conjunction with toDateTime param.. [optional]
                to_date_time (datetime): Used to limit the response to a specific date range. Must be used in conjunction with fromDateTime param.. [optional]
                format (str): [optional] if omitted the server will use the default value of "json"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AuditLog
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["project_id"] = project_id
            return self.call_with_http_info(**kwargs)

        self.projects_project_id_audit_log_get = _Endpoint(
            settings={
                "response_type": (AuditLog,),
                "auth": [],
                "endpoint_path": "/projects/{projectId}/auditLog",
                "operation_id": "projects_project_id_audit_log_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "limit",
                    "from_date_time",
                    "to_date_time",
                    "format",
                ],
                "required": ["project_id",],
                "nullable": [],
                "enum": [],
                "validation": ["limit",],
            },
            root_map={
                "validations": {
                    ("limit",): {"inclusive_maximum": 1500, "inclusive_minimum": 0,},
                },
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "limit": (int,),
                    "from_date_time": (datetime,),
                    "to_date_time": (datetime,),
                    "format": (str,),
                },
                "attribute_map": {
                    "project_id": "projectId",
                    "limit": "limit",
                    "from_date_time": "fromDateTime",
                    "to_date_time": "toDateTime",
                    "format": "format",
                },
                "location_map": {
                    "project_id": "path",
                    "limit": "query",
                    "from_date_time": "query",
                    "to_date_time": "query",
                    "format": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json", "text/csv"],
                "content_type": [],
            },
            api_client=api_client,
            callable=__projects_project_id_audit_log_get,
        )

        def __projects_project_id_machines_machine_id_force_rescan_post(
            self, project_id, machine_id, **kwargs
        ):
            """Force rescan of machine volumes.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.projects_project_id_machines_machine_id_force_rescan_post(project_id, machine_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str):
                machine_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["project_id"] = project_id
            kwargs["machine_id"] = machine_id
            return self.call_with_http_info(**kwargs)

        self.projects_project_id_machines_machine_id_force_rescan_post = _Endpoint(
            settings={
                "response_type": None,
                "auth": [],
                "endpoint_path": "/projects/{projectId}/machines/{machineId}/forceRescan",
                "operation_id": "projects_project_id_machines_machine_id_force_rescan_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": ["project_id", "machine_id",],
                "required": ["project_id", "machine_id",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {"project_id": (str,), "machine_id": (str,),},
                "attribute_map": {
                    "project_id": "projectId",
                    "machine_id": "machineId",
                },
                "location_map": {"project_id": "path", "machine_id": "path",},
                "collection_format_map": {},
            },
            headers_map={"accept": ["application/json"], "content_type": [],},
            api_client=api_client,
            callable=__projects_project_id_machines_machine_id_force_rescan_post,
        )

        def __projects_project_id_storage_get(self, project_id, **kwargs):
            """project's storage  # noqa: E501

            get project's storage usage (vCenter only)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.projects_project_id_storage_get(project_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ProjectStorage
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["project_id"] = project_id
            return self.call_with_http_info(**kwargs)

        self.projects_project_id_storage_get = _Endpoint(
            settings={
                "response_type": (ProjectStorage,),
                "auth": [],
                "endpoint_path": "/projects/{projectId}/storage",
                "operation_id": "projects_project_id_storage_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": ["project_id",],
                "required": ["project_id",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {"project_id": (str,),},
                "attribute_map": {"project_id": "projectId",},
                "location_map": {"project_id": "path",},
                "collection_format_map": {},
            },
            headers_map={"accept": ["application/json"], "content_type": [],},
            api_client=api_client,
            callable=__projects_project_id_storage_get,
        )

        def __projects_remove_users_post(self, projects_and_users, **kwargs):
            """Remove User  # noqa: E501

            Remove User from Project  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.projects_remove_users_post(projects_and_users, async_req=True)
            >>> result = thread.get()

            Args:
                projects_and_users (ProjectsAndUsers):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["projects_and_users"] = projects_and_users
            return self.call_with_http_info(**kwargs)

        self.projects_remove_users_post = _Endpoint(
            settings={
                "response_type": None,
                "auth": [],
                "endpoint_path": "/projects/removeUsers",
                "operation_id": "projects_remove_users_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": ["projects_and_users",],
                "required": ["projects_and_users",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {"projects_and_users": (ProjectsAndUsers,),},
                "attribute_map": {},
                "location_map": {"projects_and_users": "body",},
                "collection_format_map": {},
            },
            headers_map={"accept": [], "content_type": ["application/json"]},
            api_client=api_client,
            callable=__projects_remove_users_post,
        )

        def __replace_api_token_post(self, **kwargs):
            """Replaces API token  # noqa: E501

            Replaces API token  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.replace_api_token_post(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse2001
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            return self.call_with_http_info(**kwargs)

        self.replace_api_token_post = _Endpoint(
            settings={
                "response_type": (InlineResponse2001,),
                "auth": [],
                "endpoint_path": "/replaceApiToken",
                "operation_id": "replace_api_token_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {},
                "attribute_map": {},
                "location_map": {},
                "collection_format_map": {},
            },
            headers_map={"accept": ["application/json"], "content_type": [],},
            api_client=api_client,
            callable=__replace_api_token_post,
        )

        def __set_password_post(self, set_password_params, **kwargs):
            """Set password for invited user  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.set_password_post(set_password_params, async_req=True)
            >>> result = thread.get()

            Args:
                set_password_params (InlineObject2):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["set_password_params"] = set_password_params
            return self.call_with_http_info(**kwargs)

        self.set_password_post = _Endpoint(
            settings={
                "response_type": None,
                "auth": [],
                "endpoint_path": "/setPassword",
                "operation_id": "set_password_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": ["set_password_params",],
                "required": ["set_password_params",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {"set_password_params": (InlineObject2,),},
                "attribute_map": {},
                "location_map": {"set_password_params": "body",},
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
            callable=__set_password_post,
        )

        def __users_assign_roles_post(self, users_and_roles, **kwargs):
            """Add roles to users  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.users_assign_roles_post(users_and_roles, async_req=True)
            >>> result = thread.get()

            Args:
                users_and_roles (UsersAndRoles):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UsersList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["users_and_roles"] = users_and_roles
            return self.call_with_http_info(**kwargs)

        self.users_assign_roles_post = _Endpoint(
            settings={
                "response_type": (UsersList,),
                "auth": [],
                "endpoint_path": "/users/assignRoles",
                "operation_id": "users_assign_roles_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": ["users_and_roles",],
                "required": ["users_and_roles",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {"users_and_roles": (UsersAndRoles,),},
                "attribute_map": {},
                "location_map": {"users_and_roles": "body",},
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
            callable=__users_assign_roles_post,
        )

        def __users_post(self, users_params, **kwargs):
            """Create a new User  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.users_post(users_params, async_req=True)
            >>> result = thread.get()

            Args:
                users_params (InlineObject6):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                User
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["users_params"] = users_params
            return self.call_with_http_info(**kwargs)

        self.users_post = _Endpoint(
            settings={
                "response_type": (User,),
                "auth": [],
                "endpoint_path": "/users",
                "operation_id": "users_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": ["users_params",],
                "required": ["users_params",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {"users_params": (InlineObject6,),},
                "attribute_map": {},
                "location_map": {"users_params": "body",},
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
            callable=__users_post,
        )

        def __users_revoke_roles_post(self, users_and_roles, **kwargs):
            """Revoke roles from users  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.users_revoke_roles_post(users_and_roles, async_req=True)
            >>> result = thread.get()

            Args:
                users_and_roles (UsersAndRoles):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UsersList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["users_and_roles"] = users_and_roles
            return self.call_with_http_info(**kwargs)

        self.users_revoke_roles_post = _Endpoint(
            settings={
                "response_type": (UsersList,),
                "auth": [],
                "endpoint_path": "/users/revokeRoles",
                "operation_id": "users_revoke_roles_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": ["users_and_roles",],
                "required": ["users_and_roles",],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {"users_and_roles": (UsersAndRoles,),},
                "attribute_map": {},
                "location_map": {"users_and_roles": "body",},
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
            callable=__users_revoke_roles_post,
        )
