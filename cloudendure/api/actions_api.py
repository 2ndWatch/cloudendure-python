"""
    CloudEndure API documentation

    Â© 2021 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\".   # noqa: E501

    The version of the OpenAPI document: 5
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cloudendure.api_client import ApiClient
from cloudendure.api_client import Endpoint as _Endpoint
from cloudendure.model.error import Error
from cloudendure.model.inline_object3 import InlineObject3
from cloudendure.model.inline_object4 import InlineObject4
from cloudendure.model.inline_object5 import InlineObject5
from cloudendure.model.inline_object7 import InlineObject7
from cloudendure.model.inline_object9 import InlineObject9
from cloudendure.model.job import Job
from cloudendure.model.jobs_list import JobsList
from cloudendure.model.launch_machines_parameters import LaunchMachinesParameters
from cloudendure.model.machines_list_invalid_ids_and_job import (
    MachinesListInvalidIDsAndJob,
)
from cloudendure.model_utils import (
    check_allowed_values,  # noqa: F401
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)


class ActionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __projects_project_id_jobs_get(self, project_id, **kwargs):
            """List Jobs  # noqa: E501

            Returns the list of jobs in the project.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.projects_project_id_jobs_get(project_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str):

            Keyword Args:
                offset (int): With which item to start (0 based).. [optional] if omitted the server will use the default value of 0
                limit (int): A number specifying how many entries to return.. [optional] if omitted the server will use the default value of 1500
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JobsList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["project_id"] = project_id
            return self.call_with_http_info(**kwargs)

        self.projects_project_id_jobs_get = _Endpoint(
            settings={
                "response_type": (JobsList,),
                "auth": [],
                "endpoint_path": "/projects/{projectId}/jobs",
                "operation_id": "projects_project_id_jobs_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "offset",
                    "limit",
                ],
                "required": [
                    "project_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [
                    "offset",
                    "limit",
                ],
            },
            root_map={
                "validations": {
                    ("offset",): {
                        "inclusive_minimum": 0,
                    },
                    ("limit",): {
                        "inclusive_maximum": 1500,
                        "inclusive_minimum": 0,
                    },
                },
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "offset": (int,),
                    "limit": (int,),
                },
                "attribute_map": {
                    "project_id": "projectId",
                    "offset": "offset",
                    "limit": "limit",
                },
                "location_map": {
                    "project_id": "path",
                    "offset": "query",
                    "limit": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
            callable=__projects_project_id_jobs_get,
        )

        def __projects_project_id_jobs_job_id_get(self, project_id, job_id, **kwargs):
            """Get Job  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.projects_project_id_jobs_job_id_get(project_id, job_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str):
                job_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Job
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["project_id"] = project_id
            kwargs["job_id"] = job_id
            return self.call_with_http_info(**kwargs)

        self.projects_project_id_jobs_job_id_get = _Endpoint(
            settings={
                "response_type": (Job,),
                "auth": [],
                "endpoint_path": "/projects/{projectId}/jobs/{jobId}",
                "operation_id": "projects_project_id_jobs_job_id_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "job_id",
                ],
                "required": [
                    "project_id",
                    "job_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "job_id": (str,),
                },
                "attribute_map": {
                    "project_id": "projectId",
                    "job_id": "jobId",
                },
                "location_map": {
                    "project_id": "path",
                    "job_id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
            callable=__projects_project_id_jobs_job_id_get,
        )

        def __projects_project_id_launch_machines_post(
            self, project_id, launch_machines, **kwargs
        ):
            """Launch target machines  # noqa: E501

            Launch target machines for test, recovery or cutover (by passing enum value to launchType param)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.projects_project_id_launch_machines_post(project_id, launch_machines, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str):
                launch_machines (LaunchMachinesParameters): Machines to launch

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Job
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["project_id"] = project_id
            kwargs["launch_machines"] = launch_machines
            return self.call_with_http_info(**kwargs)

        self.projects_project_id_launch_machines_post = _Endpoint(
            settings={
                "response_type": (Job,),
                "auth": [],
                "endpoint_path": "/projects/{projectId}/launchMachines",
                "operation_id": "projects_project_id_launch_machines_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "launch_machines",
                ],
                "required": [
                    "project_id",
                    "launch_machines",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "launch_machines": (LaunchMachinesParameters,),
                },
                "attribute_map": {
                    "project_id": "projectId",
                },
                "location_map": {
                    "project_id": "path",
                    "launch_machines": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
            callable=__projects_project_id_launch_machines_post,
        )

        def __projects_project_id_move_machines_post(
            self, project_id, move_machines_params, **kwargs
        ):
            """Moves machines to another project  # noqa: E501

            TBC   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.projects_project_id_move_machines_post(project_id, move_machines_params, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str):
                move_machines_params (InlineObject4):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["project_id"] = project_id
            kwargs["move_machines_params"] = move_machines_params
            return self.call_with_http_info(**kwargs)

        self.projects_project_id_move_machines_post = _Endpoint(
            settings={
                "response_type": None,
                "auth": [],
                "endpoint_path": "/projects/{projectId}/moveMachines",
                "operation_id": "projects_project_id_move_machines_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "move_machines_params",
                ],
                "required": [
                    "project_id",
                    "move_machines_params",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "move_machines_params": (InlineObject4,),
                },
                "attribute_map": {
                    "project_id": "projectId",
                },
                "location_map": {
                    "project_id": "path",
                    "move_machines_params": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
            callable=__projects_project_id_move_machines_post,
        )

        def __projects_project_id_pause_replication_post(
            self, project_id, machine_ids, **kwargs
        ):
            """Pause replication  # noqa: E501

            Pause replication for given machines  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.projects_project_id_pause_replication_post(project_id, machine_ids, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str):
                machine_ids (InlineObject9):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                MachinesListInvalidIDsAndJob
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["project_id"] = project_id
            kwargs["machine_ids"] = machine_ids
            return self.call_with_http_info(**kwargs)

        self.projects_project_id_pause_replication_post = _Endpoint(
            settings={
                "response_type": (MachinesListInvalidIDsAndJob,),
                "auth": [],
                "endpoint_path": "/projects/{projectId}/pauseReplication",
                "operation_id": "projects_project_id_pause_replication_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "machine_ids",
                ],
                "required": [
                    "project_id",
                    "machine_ids",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "machine_ids": (InlineObject9,),
                },
                "attribute_map": {
                    "project_id": "projectId",
                },
                "location_map": {
                    "project_id": "path",
                    "machine_ids": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
            callable=__projects_project_id_pause_replication_post,
        )

        def __projects_project_id_replicas_delete(
            self, project_id, replica_ids, **kwargs
        ):
            """Perform Cleanup  # noqa: E501

            Spawns a cleanup job to remove the specified target machines from the cloud. Returns the job information.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.projects_project_id_replicas_delete(project_id, replica_ids, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str):
                replica_ids (InlineObject5):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Job
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["project_id"] = project_id
            kwargs["replica_ids"] = replica_ids
            return self.call_with_http_info(**kwargs)

        self.projects_project_id_replicas_delete = _Endpoint(
            settings={
                "response_type": (Job,),
                "auth": [],
                "endpoint_path": "/projects/{projectId}/replicas",
                "operation_id": "projects_project_id_replicas_delete",
                "http_method": "DELETE",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "replica_ids",
                ],
                "required": [
                    "project_id",
                    "replica_ids",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "replica_ids": (InlineObject5,),
                },
                "attribute_map": {
                    "project_id": "projectId",
                },
                "location_map": {
                    "project_id": "path",
                    "replica_ids": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
            callable=__projects_project_id_replicas_delete,
        )

        def __projects_project_id_reverse_replication_post(self, project_id, **kwargs):
            """Reverse replication direction  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.projects_project_id_reverse_replication_post(project_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["project_id"] = project_id
            return self.call_with_http_info(**kwargs)

        self.projects_project_id_reverse_replication_post = _Endpoint(
            settings={
                "response_type": None,
                "auth": [],
                "endpoint_path": "/projects/{projectId}/reverseReplication",
                "operation_id": "projects_project_id_reverse_replication_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                ],
                "required": [
                    "project_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                },
                "attribute_map": {
                    "project_id": "projectId",
                },
                "location_map": {
                    "project_id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
            callable=__projects_project_id_reverse_replication_post,
        )

        def __projects_project_id_start_replication_post(
            self, project_id, machine_ids, **kwargs
        ):
            """Start replication  # noqa: E501

            Start replication of the specified source machines. Returns the machine for which replication has been successfully started, and the IDs for which replication could not be started.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.projects_project_id_start_replication_post(project_id, machine_ids, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str):
                machine_ids (InlineObject3):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                MachinesListInvalidIDsAndJob
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["project_id"] = project_id
            kwargs["machine_ids"] = machine_ids
            return self.call_with_http_info(**kwargs)

        self.projects_project_id_start_replication_post = _Endpoint(
            settings={
                "response_type": (MachinesListInvalidIDsAndJob,),
                "auth": [],
                "endpoint_path": "/projects/{projectId}/startReplication",
                "operation_id": "projects_project_id_start_replication_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "machine_ids",
                ],
                "required": [
                    "project_id",
                    "machine_ids",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "machine_ids": (InlineObject3,),
                },
                "attribute_map": {
                    "project_id": "projectId",
                },
                "location_map": {
                    "project_id": "path",
                    "machine_ids": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
            callable=__projects_project_id_start_replication_post,
        )

        def __projects_project_id_stop_replication_post(
            self, project_id, machine_ids, **kwargs
        ):
            """Stop replication  # noqa: E501

            Stop replication of the specified source machines. Returns the machine for which replication has been successfully stopped, and the IDs for which replication could not be stopped.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.projects_project_id_stop_replication_post(project_id, machine_ids, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str):
                machine_ids (InlineObject7):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                MachinesListInvalidIDsAndJob
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["project_id"] = project_id
            kwargs["machine_ids"] = machine_ids
            return self.call_with_http_info(**kwargs)

        self.projects_project_id_stop_replication_post = _Endpoint(
            settings={
                "response_type": (MachinesListInvalidIDsAndJob,),
                "auth": [],
                "endpoint_path": "/projects/{projectId}/stopReplication",
                "operation_id": "projects_project_id_stop_replication_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "machine_ids",
                ],
                "required": [
                    "project_id",
                    "machine_ids",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "machine_ids": (InlineObject7,),
                },
                "attribute_map": {
                    "project_id": "projectId",
                },
                "location_map": {
                    "project_id": "path",
                    "machine_ids": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
            callable=__projects_project_id_stop_replication_post,
        )
