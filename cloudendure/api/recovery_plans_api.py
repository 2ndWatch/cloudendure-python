"""
    CloudEndure API documentation

    Â© 2021 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\".   # noqa: E501

    The version of the OpenAPI document: 5
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cloudendure.api_client import ApiClient
from cloudendure.api_client import Endpoint as _Endpoint
from cloudendure.model.inline_object10 import InlineObject10
from cloudendure.model.job import Job
from cloudendure.model.recovery_plan import RecoveryPlan
from cloudendure.model.recovery_plan_list import RecoveryPlanList
from cloudendure.model_utils import (
    check_allowed_values,  # noqa: F401
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)


class RecoveryPlansApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __projects_project_id_recovery_plans_get(self, project_id, **kwargs):
            """Gets all recovery plans for the project.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.projects_project_id_recovery_plans_get(project_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RecoveryPlanList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["project_id"] = project_id
            return self.call_with_http_info(**kwargs)

        self.projects_project_id_recovery_plans_get = _Endpoint(
            settings={
                "response_type": (RecoveryPlanList,),
                "auth": [],
                "endpoint_path": "/projects/{projectId}/recoveryPlans",
                "operation_id": "projects_project_id_recovery_plans_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                ],
                "required": [
                    "project_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                },
                "attribute_map": {
                    "project_id": "projectId",
                },
                "location_map": {
                    "project_id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
            callable=__projects_project_id_recovery_plans_get,
        )

        def __projects_project_id_recovery_plans_post(
            self, project_id, recovery_plan, **kwargs
        ):
            """Creates a new recovery plan.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.projects_project_id_recovery_plans_post(project_id, recovery_plan, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str):
                recovery_plan (RecoveryPlan): Recovery Plan to create

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RecoveryPlan
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["project_id"] = project_id
            kwargs["recovery_plan"] = recovery_plan
            return self.call_with_http_info(**kwargs)

        self.projects_project_id_recovery_plans_post = _Endpoint(
            settings={
                "response_type": (RecoveryPlan,),
                "auth": [],
                "endpoint_path": "/projects/{projectId}/recoveryPlans",
                "operation_id": "projects_project_id_recovery_plans_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "recovery_plan",
                ],
                "required": [
                    "project_id",
                    "recovery_plan",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "recovery_plan": (RecoveryPlan,),
                },
                "attribute_map": {
                    "project_id": "projectId",
                },
                "location_map": {
                    "project_id": "path",
                    "recovery_plan": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
            callable=__projects_project_id_recovery_plans_post,
        )

        def __projects_project_id_recovery_plans_recovery_plan_id_delete(
            self, project_id, recovery_plan_id, **kwargs
        ):
            """Deletes a recovery plan.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.projects_project_id_recovery_plans_recovery_plan_id_delete(project_id, recovery_plan_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str):
                recovery_plan_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["project_id"] = project_id
            kwargs["recovery_plan_id"] = recovery_plan_id
            return self.call_with_http_info(**kwargs)

        self.projects_project_id_recovery_plans_recovery_plan_id_delete = _Endpoint(
            settings={
                "response_type": None,
                "auth": [],
                "endpoint_path": "/projects/{projectId}/recoveryPlans/{recoveryPlanId}",
                "operation_id": "projects_project_id_recovery_plans_recovery_plan_id_delete",
                "http_method": "DELETE",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "recovery_plan_id",
                ],
                "required": [
                    "project_id",
                    "recovery_plan_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "recovery_plan_id": (str,),
                },
                "attribute_map": {
                    "project_id": "projectId",
                    "recovery_plan_id": "recoveryPlanId",
                },
                "location_map": {
                    "project_id": "path",
                    "recovery_plan_id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": [],
                "content_type": [],
            },
            api_client=api_client,
            callable=__projects_project_id_recovery_plans_recovery_plan_id_delete,
        )

        def __projects_project_id_recovery_plans_recovery_plan_id_get(
            self, project_id, recovery_plan_id, **kwargs
        ):
            """Gets a recovery plan.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.projects_project_id_recovery_plans_recovery_plan_id_get(project_id, recovery_plan_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str):
                recovery_plan_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RecoveryPlan
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["project_id"] = project_id
            kwargs["recovery_plan_id"] = recovery_plan_id
            return self.call_with_http_info(**kwargs)

        self.projects_project_id_recovery_plans_recovery_plan_id_get = _Endpoint(
            settings={
                "response_type": (RecoveryPlan,),
                "auth": [],
                "endpoint_path": "/projects/{projectId}/recoveryPlans/{recoveryPlanId}",
                "operation_id": "projects_project_id_recovery_plans_recovery_plan_id_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "recovery_plan_id",
                ],
                "required": [
                    "project_id",
                    "recovery_plan_id",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "recovery_plan_id": (str,),
                },
                "attribute_map": {
                    "project_id": "projectId",
                    "recovery_plan_id": "recoveryPlanId",
                },
                "location_map": {
                    "project_id": "path",
                    "recovery_plan_id": "path",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
            callable=__projects_project_id_recovery_plans_recovery_plan_id_get,
        )

        def __projects_project_id_recovery_plans_recovery_plan_id_patch(
            self, project_id, recovery_plan_id, recovery_plan, **kwargs
        ):
            """Updates a new recovery plan.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.projects_project_id_recovery_plans_recovery_plan_id_patch(project_id, recovery_plan_id, recovery_plan, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str):
                recovery_plan_id (str):
                recovery_plan (RecoveryPlan): Recovery Plan to create

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RecoveryPlan
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["project_id"] = project_id
            kwargs["recovery_plan_id"] = recovery_plan_id
            kwargs["recovery_plan"] = recovery_plan
            return self.call_with_http_info(**kwargs)

        self.projects_project_id_recovery_plans_recovery_plan_id_patch = _Endpoint(
            settings={
                "response_type": (RecoveryPlan,),
                "auth": [],
                "endpoint_path": "/projects/{projectId}/recoveryPlans/{recoveryPlanId}",
                "operation_id": "projects_project_id_recovery_plans_recovery_plan_id_patch",
                "http_method": "PATCH",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "recovery_plan_id",
                    "recovery_plan",
                ],
                "required": [
                    "project_id",
                    "recovery_plan_id",
                    "recovery_plan",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "recovery_plan_id": (str,),
                    "recovery_plan": (RecoveryPlan,),
                },
                "attribute_map": {
                    "project_id": "projectId",
                    "recovery_plan_id": "recoveryPlanId",
                },
                "location_map": {
                    "project_id": "path",
                    "recovery_plan_id": "path",
                    "recovery_plan": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
            callable=__projects_project_id_recovery_plans_recovery_plan_id_patch,
        )

        def __projects_project_id_run_recovery_plan_post(
            self, project_id, init_recovery_plan_params, **kwargs
        ):
            """Launch a recovery plan.  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.projects_project_id_run_recovery_plan_post(project_id, init_recovery_plan_params, async_req=True)
            >>> result = thread.get()

            Args:
                project_id (str):
                init_recovery_plan_params (InlineObject10):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Job
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs["async_req"] = kwargs.get("async_req", False)
            kwargs["_return_http_data_only"] = kwargs.get(
                "_return_http_data_only", True
            )
            kwargs["_preload_content"] = kwargs.get("_preload_content", True)
            kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
            kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
            kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
            kwargs["_host_index"] = kwargs.get("_host_index")
            kwargs["project_id"] = project_id
            kwargs["init_recovery_plan_params"] = init_recovery_plan_params
            return self.call_with_http_info(**kwargs)

        self.projects_project_id_run_recovery_plan_post = _Endpoint(
            settings={
                "response_type": (Job,),
                "auth": [],
                "endpoint_path": "/projects/{projectId}/runRecoveryPlan",
                "operation_id": "projects_project_id_run_recovery_plan_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "project_id",
                    "init_recovery_plan_params",
                ],
                "required": [
                    "project_id",
                    "init_recovery_plan_params",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "project_id": (str,),
                    "init_recovery_plan_params": (InlineObject10,),
                },
                "attribute_map": {
                    "project_id": "projectId",
                },
                "location_map": {
                    "project_id": "path",
                    "init_recovery_plan_params": "body",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
            callable=__projects_project_id_run_recovery_plan_post,
        )
