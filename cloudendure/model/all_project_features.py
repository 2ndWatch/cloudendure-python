"""
    CloudEndure API documentation

    Â© 2021 CloudEndure All rights reserved  # General Request authentication in CloudEndure's API is done using session cookies. A session cookie is returned upon successful execution of the \"login\" method. This value must then be provided within the request headers of all subsequent API requests.  ## Errors Some errors are not specifically written in every method since they may always return. Those are: 1) 401 (Unauthorized) - for unauthenticated requests. 2) 405 (Method Not Allowed) - for using a method that is not supported (POST instead of GET). 3) 403 (Forbidden) - request is authenticated, but the user is not allowed to access. 4) 422 (Unprocessable Entity) - for invalid input.  ## Formats All strings with date-time format are according to RFC3339.  All strings with \"duration\" format are according to ISO8601. For example, a full day duration can be specified with \"PNNNND\".   # noqa: E501

    The version of the OpenAPI document: 5
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from cloudendure.model_utils import (
    ApiTypeError,
    ModelComposed,  # noqa: F401
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)


def lazy_import():
    from cloudendure.model.project_ce_admin_properties import ProjectCeAdminProperties

    globals()["ProjectCeAdminProperties"] = ProjectCeAdminProperties


class AllProjectFeatures(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {}

    validations = {}

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            "google": (bool,),  # noqa: E501
            "no_public_ips": (bool,),  # noqa: E501
            "enable_ubuntu18_converter": (bool,),  # noqa: E501
            "windows_converters": (bool,),  # noqa: E501
            "force_reversed_handshake_direction": (bool,),  # noqa: E501
            "no_converters": (bool,),  # noqa: E501
            "vio": (bool,),  # noqa: E501
            "aws_pending_snapshots_for_consistent_snapshot": (int,),  # noqa: E501
            "no_cloud": (bool,),  # noqa: E501
            "consistent_snapshot_creation_interval_min": (int,),  # noqa: E501
            "is_demo": (bool,),  # noqa: E501
            "mtu_size": (int,),  # noqa: E501
            "allow_byol_on_dedicated_instance": (bool,),  # noqa: E501
            "force_no_rescan_after_reboot": (bool,),  # noqa: E501
            "max_converter_volumes": (int,),  # noqa: E501
            "azurearm": (bool,),  # noqa: E501
            "vcenter": (bool,),  # noqa: E501
            "allowed_az_ids": (str,),  # noqa: E501
            "subnet_filter": (str,),  # noqa: E501
            "disable_target_region_cleanup_protection": (bool,),  # noqa: E501
            "no_snapshot_considered_lag_milliseconds": (int,),  # noqa: E501
            "aws_pending_snapshots_for_disconnection": (int,),  # noqa: E501
            "no_converters_windows": (bool,),  # noqa: E501
            "disable_replica_creation": (bool,),  # noqa: E501
            "aws_pending_snapshots_for_consistency_lost": (int,),  # noqa: E501
            "aws": (bool,),  # noqa: E501
            "aws_pending_snapshots_for_inconsistent_snapshot": (int,),  # noqa: E501
            "max_replicator_volumes": (int,),  # noqa: E501
            "allow_recovery_plans": (bool,),  # noqa: E501
            "snapshot_creation_interval_min": (int,),  # noqa: E501
            "snapshot_on_demand_timeout": (int,),  # noqa: E501
            "allow_archiving": (bool,),  # noqa: E501
            "allow_no_rescan_after_reboot": (bool,),  # noqa: E501
            "custom_replicator_instance_type": (str,),  # noqa: E501
            "disable_snapshot_on_demand": (bool,),  # noqa: E501
            "disable_install": (bool,),  # noqa: E501
            "hdd": (bool,),  # noqa: E501
            "snapshot_creation_interval_max": (int,),  # noqa: E501
            "ce_admin_properties": (ProjectCeAdminProperties,),  # noqa: E501
            "azure": (bool,),  # noqa: E501
            "aws_pending_snapshots_for_user_initiated": (int,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None

    attribute_map = {
        "google": "google",  # noqa: E501
        "no_public_ips": "no_public_ips",  # noqa: E501
        "enable_ubuntu18_converter": "enable_ubuntu18_converter",  # noqa: E501
        "windows_converters": "windows_converters",  # noqa: E501
        "force_reversed_handshake_direction": "force_reversed_handshake_direction",  # noqa: E501
        "no_converters": "no_converters",  # noqa: E501
        "vio": "vio",  # noqa: E501
        "aws_pending_snapshots_for_consistent_snapshot": "aws_pending_snapshots_for_consistent_snapshot",  # noqa: E501
        "no_cloud": "no_cloud",  # noqa: E501
        "consistent_snapshot_creation_interval_min": "consistent_snapshot_creation_interval_min",  # noqa: E501
        "is_demo": "is_demo",  # noqa: E501
        "mtu_size": "mtu_size",  # noqa: E501
        "allow_byol_on_dedicated_instance": "allow_byol_on_dedicated_instance",  # noqa: E501
        "force_no_rescan_after_reboot": "force_no_rescan_after_reboot",  # noqa: E501
        "max_converter_volumes": "max_converter_volumes",  # noqa: E501
        "azurearm": "azurearm",  # noqa: E501
        "vcenter": "vcenter",  # noqa: E501
        "allowed_az_ids": "allowed_az_ids",  # noqa: E501
        "subnet_filter": "subnet_filter",  # noqa: E501
        "disable_target_region_cleanup_protection": "disable_target_region_cleanup_protection",  # noqa: E501
        "no_snapshot_considered_lag_milliseconds": "no_snapshot_considered_lag_milliseconds",  # noqa: E501
        "aws_pending_snapshots_for_disconnection": "aws_pending_snapshots_for_disconnection",  # noqa: E501
        "no_converters_windows": "no_converters_windows",  # noqa: E501
        "disable_replica_creation": "disable_replica_creation",  # noqa: E501
        "aws_pending_snapshots_for_consistency_lost": "aws_pending_snapshots_for_consistency_lost",  # noqa: E501
        "aws": "aws",  # noqa: E501
        "aws_pending_snapshots_for_inconsistent_snapshot": "aws_pending_snapshots_for_inconsistent_snapshot",  # noqa: E501
        "max_replicator_volumes": "max_replicator_volumes",  # noqa: E501
        "allow_recovery_plans": "allow_recovery_plans",  # noqa: E501
        "snapshot_creation_interval_min": "snapshot_creation_interval_min",  # noqa: E501
        "snapshot_on_demand_timeout": "snapshot_on_demand_timeout",  # noqa: E501
        "allow_archiving": "allow_archiving",  # noqa: E501
        "allow_no_rescan_after_reboot": "allow_no_rescan_after_reboot",  # noqa: E501
        "custom_replicator_instance_type": "custom_replicator_instance_type",  # noqa: E501
        "disable_snapshot_on_demand": "disable_snapshot_on_demand",  # noqa: E501
        "disable_install": "disable_install",  # noqa: E501
        "hdd": "hdd",  # noqa: E501
        "snapshot_creation_interval_max": "snapshot_creation_interval_max",  # noqa: E501
        "ce_admin_properties": "ceAdminProperties",  # noqa: E501
        "azure": "azure",  # noqa: E501
        "aws_pending_snapshots_for_user_initiated": "aws_pending_snapshots_for_user_initiated",  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set(
        [
            "_data_store",
            "_check_type",
            "_spec_property_naming",
            "_path_to_item",
            "_configuration",
            "_visited_composed_classes",
        ]
    )

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """AllProjectFeatures - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            google (bool): [optional]  # noqa: E501
            no_public_ips (bool): [optional]  # noqa: E501
            enable_ubuntu18_converter (bool): [optional]  # noqa: E501
            windows_converters (bool): [optional]  # noqa: E501
            force_reversed_handshake_direction (bool): [optional]  # noqa: E501
            no_converters (bool): [optional]  # noqa: E501
            vio (bool): [optional]  # noqa: E501
            aws_pending_snapshots_for_consistent_snapshot (int): [optional]  # noqa: E501
            no_cloud (bool): [optional]  # noqa: E501
            consistent_snapshot_creation_interval_min (int): [optional]  # noqa: E501
            is_demo (bool): [optional]  # noqa: E501
            mtu_size (int): [optional]  # noqa: E501
            allow_byol_on_dedicated_instance (bool): [optional]  # noqa: E501
            force_no_rescan_after_reboot (bool): [optional]  # noqa: E501
            max_converter_volumes (int): [optional]  # noqa: E501
            azurearm (bool): [optional]  # noqa: E501
            vcenter (bool): [optional]  # noqa: E501
            allowed_az_ids (str): [optional]  # noqa: E501
            subnet_filter (str): [optional]  # noqa: E501
            disable_target_region_cleanup_protection (bool): [optional]  # noqa: E501
            no_snapshot_considered_lag_milliseconds (int): [optional]  # noqa: E501
            aws_pending_snapshots_for_disconnection (int): [optional]  # noqa: E501
            no_converters_windows (bool): [optional]  # noqa: E501
            disable_replica_creation (bool): [optional]  # noqa: E501
            aws_pending_snapshots_for_consistency_lost (int): [optional]  # noqa: E501
            aws (bool): [optional]  # noqa: E501
            aws_pending_snapshots_for_inconsistent_snapshot (int): [optional]  # noqa: E501
            max_replicator_volumes (int): [optional]  # noqa: E501
            allow_recovery_plans (bool): [optional]  # noqa: E501
            snapshot_creation_interval_min (int): [optional]  # noqa: E501
            snapshot_on_demand_timeout (int): [optional]  # noqa: E501
            allow_archiving (bool): [optional]  # noqa: E501
            allow_no_rescan_after_reboot (bool): [optional]  # noqa: E501
            custom_replicator_instance_type (str): [optional]  # noqa: E501
            disable_snapshot_on_demand (bool): [optional]  # noqa: E501
            disable_install (bool): [optional]  # noqa: E501
            hdd (bool): [optional]  # noqa: E501
            snapshot_creation_interval_max (int): [optional]  # noqa: E501
            ce_admin_properties (ProjectCeAdminProperties): [optional]  # noqa: E501
            azure (bool): [optional]  # noqa: E501
            aws_pending_snapshots_for_user_initiated (int): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop("_check_type", True)
        _spec_property_naming = kwargs.pop("_spec_property_naming", False)
        _path_to_item = kwargs.pop("_path_to_item", ())
        _configuration = kwargs.pop("_configuration", None)
        _visited_composed_classes = kwargs.pop("_visited_composed_classes", ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments."
                % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if (
                var_name not in self.attribute_map
                and self._configuration is not None
                and self._configuration.discard_unknown_keys
                and self.additional_properties_type is None
            ):
                # discard variable.
                continue
            setattr(self, var_name, var_value)
